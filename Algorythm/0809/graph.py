'''
<그래프>

정점(Vertex)과 이를 연결하는 간선(Edge)들의 집합으로 이루어진 비선형 자료구조
소셜 네트워크와 지하철 노선도, 네비게이션 등과 같이, 현실에 있는 개체 간의 관계를 나타내기 위해 사용한다.

정점(Vertex) : 간선으로 연결되는 객체. 노드(Node)라고도 한다
간선(Edge) " 정점 간의 관계(연결)를 표현하는 선
경로(Path) : 시작 정점부터 도착 정점까지 거치는 정점을 나열한 것
인접(Adjacency) : 두 개의 정점이 하나의 간선으로 직접 연결된 상태


<그래프의 방향>

1) 무방향 그래프
- 간선의 방향이 없는 가장 일반적인 그래프
- 간선을 통해 양방향의 정점 이동 가능
- 차수(Degree) : 하나의 정점에 연결된 간선의 개수
- 모든 정점의 차수의 합 : 간선 수 x 2

2) 유방향 그래프
- 간선의 방향이 있는 그래프 (ex 지하철)
- 간선의 방향이 가리키는 정점으로 이동 가능
- 차수(Degree) :  진입 차수와 진출 차수로 나누어짐
    진입 차수(In-degree) : 외부 정점에서 한 정점으로 들어오는 간선의 수
    진출 차수(Out-degree) : 한 정점에서 외부 정저으로 나가는 간선의 수


<그래프의 표현>
graph = {
    0 : [1, 2],
    1 : [0, 3, 4],
    2 : [0, 4, 5],
    3 : [1],
    4 : [1, 2, 6],
    5 : [2],
    6 : [4]
}
-> 키값이 곧 인덱스가 됨
키 생략하고 밸유들로만 이차원리스트 만들어도 ㅇㅋ!!
graph = [
    [1, 2],
    [0, 3, 4],
    .
    .
    .
]
# graph[0][0] == 1



# 인접 행렬 만들기
n = 7 # 정점 개수
m = 7 # 간선 개수

# nxn 행렬 초기화
graph = [[0] * n for _ in range(n)]

for _ in range(m):
    v1, v2 = map(int, input().split())
             (edge[0], edge[1])
    graph[v1][v2] = 1
    graph[v2][v1] = 1



# 인접 리스트
n = 7
m = 7

graph = [[] for _ in range(n)]
# [[], [], [], ...]

for _ in range(m):
    v1, v2 = map(int, input().split())
    graph[v1].append(v2)
    graph[v2].append(v1)

'''